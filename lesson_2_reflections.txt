These are the reflections from lesson2

Initializing a Repository
Q: What happens when you initialize a repository? Why do you 
need to do it?
A: Git sets up an empty repository (makes a new directory .git), and
initializes it. The repository has NO commits yet.

Staging Area
Q: How is the staging area different from the working directory
 and the repository? What value do you think it offers?
A: The staging area is a subset of the working directory. It allows you 
to bundle up the files you would like in this commit(?) before
commiting.

Commit Size
Q: How can you use the staging area to make sure that you have 
one commit per logical change?
A: One can use "git diff" to see the changes that you have made 
in the working directory. Then you can put only those files that 
are changed into the staging area by using "git add FILENAME".
Then you can use "git diff --staged" to ensure the staging area just 
has one logical change compared to previous commit.
A2: OK disregard the previous. The staging area is where you put 
the files that have changed for your ONE logical change. 
That way you are not commiting the entire working directory. 
Just what you WANT to have commited 
(i.e. just one logical change at a time)

When to use branches
Q: What are some situations when branches would be helpful 
in keeping your history organized?
A: Branches would help keep my history organised when I am trying 
out new ideas or new versions. Sometimes it would be nice to massively
refactor or change a file on a new branch, then try it out, then 
decide if that's what I want to have in my master branch.

